#!/usr/bin/python
"""
Created on Mon Jul 15 18:15:01 2013

A simple merger of fasta sequences generated by pLink pipeline.
Iterates over fasta entries in given input files and outputs unique entries,
that is every entry found more than once in the files will be returned only
once.

Strictly speaking, returns a union of the fasta sets provided in input files.

Dependencies:
    pyteomics - to parse fasta format

@author: ilya shamovsky
"""
import argparse, re
from pyteomics import fasta
from collections import namedtuple

Protein = namedtuple('Protein', ('description', 'sequence'))

GN_PATTERN = re.compile(r'\bGN=(?P<gene>\w+\b)')

def get_gene_name(e):
    '''
    Extracts gene name (GN) from the e.description
    Returns the namedtuple (Protein in pyteomics parlance) where
    description was replaced by the gene name.
    '''
    descr, seq = e
    m = GN_PATTERN.search(descr)
    new_descr = m.group('gene') or descr
    return Protein(new_descr, seq)
    
parser = argparse.ArgumentParser()
parser.add_argument('files', type=str, nargs='+',
                        help='.fasta files containing plink output')
parser.add_argument('-o', '--output', type=str, default=None,
                        help='file to write output to.')
parser.add_argument('--gname', action='store_true',
                        help='only leave gene name (GN) in the output fasta header')                        
parser.add_argument('-v', '--verbosity', action='count',
                        help='increase output verbosity')

args = parser.parse_args()
unique_entries = set()
for filename in args.files:
    if args.verbosity > 0:
        print 'Processing {0}...'.format(filename)
    for entry in fasta.read(open(filename)):
        if args.gname:
            entry = get_gene_name(entry)
        unique_entries.update({entry,})
    if args.verbosity > 1:
        print '\t... found {0} unique entries so far'.format(len(unique_entries))

fasta.write(unique_entries, output=args.output)
